---
import { Image } from 'astro:assets';

interface ImageProps {
  id: number;
  src: ImageMetadata;
  label: string;
  text: string;
}

interface SliderProps {
  images: ImageProps[];
}

const { images } = Astro.props;
const initialActiveTab = 1;
---

<div class="w-full max-w-md justify-center px-2">
  <div class="relative">
    <div class="flex items-end gap-4 h-56 px-3">
      {images.map((item: any) => {
        const isActive = initialActiveTab === item.id;
        return (
          <div
            data-tab-item={item.id}
            class={`h-full w-full transition-all duration-500 ease-in-out relative ${
              isActive ? "flex-grow basis-3/4" : "flex-shrink basis-12"
            }`}
          >
            <button
              type="button"
              data-tab-button={item.id}
              class={`h-full w-full relative overflow-hidden transition-all duration-500 ease-in-out ${
                isActive ? "rounded-xl" : "rounded-4xl"
              }`}
            >
              <div class="absolute inset-0 w-full h-full">
                <Image
                  src={item.src}
                  alt={item.label}
                  width={200}
                  height={200}
                  class="w-full h-full object-cover bg-gray-700"
                  loading="lazy"
                  decoding="async"
                />
                <div class="absolute bottom-0 left-0 right-0 w-full flex justify-start items-center p-4">
                  <p class="text-white text-xs font-semibold">{item.label}</p>
                </div>
              </div>

              <div
                data-tab-overlay={item.id}
                class={`absolute inset-0 flex flex-col items-center transition-opacity duration-300 ${
                  isActive ? "opacity-0" : "opacity-100"
                } bg-navyblue`}
              >
                <span class="text-white font-bold text-sm absolute rotate-270 top-1/3 w-40">
                  {item.label}
                </span>
                <span class="text-navyblue font-bold text-sm rounded-full w-8 h-8 bg-white absolute bottom-2 flex justify-center items-center">
                  {item.id}
                </span>
              </div>
            </button>
          </div>
        );
      })}
    </div>
  </div>
  <div class="flex mx-auto h-[87px] mt-3 w-[95%] bg-[#0058b63e] rounded-xl">
    {images.map((item: any) => (
      <p
        data-tab-content={item.id}
        class={`text-sm font-notothai p-2 text-[#0e1979] ${
          initialActiveTab === item.id ? "" : "hidden"
        }`}
        set:html={item.text}
      />
    ))}
  </div>
</div>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const tabButtons = document.querySelectorAll('[data-tab-button]');
  const tabItems = document.querySelectorAll('[data-tab-item]');
  const overlays = document.querySelectorAll('[data-tab-overlay]');
  const contentElements = document.querySelectorAll('[data-tab-content]');

  function activateTab(tabId) {
    // Update tab container sizes
    tabItems.forEach(item => {
      const isActive = item.dataset.tabItem === tabId;
      item.classList.toggle('flex-grow', isActive);
      item.classList.toggle('basis-3/4', isActive);
      item.classList.toggle('flex-shrink', !isActive);
      item.classList.toggle('basis-12', !isActive);
    });

    // Update button border radius
    tabButtons.forEach(button => {
      button.classList.toggle('rounded-xl', button.dataset.tabButton === tabId);
      button.classList.toggle('rounded-4xl', button.dataset.tabButton !== tabId);
    });

    // Update overlay opacity
    overlays.forEach(overlay => {
      overlay.classList.toggle('opacity-0', overlay.dataset.tabOverlay === tabId);
      overlay.classList.toggle('opacity-100', overlay.dataset.tabOverlay !== tabId);
    });

    // Update visible content
    contentElements.forEach(content => {
      content.classList.toggle('hidden', content.dataset.tabContent !== tabId);
    });
  }

  tabButtons.forEach(button => {
    button.addEventListener('click', () => activateTab(button.dataset.tabButton));
  });
});
</script>